require('../settings')
const chalk = require('chalk')
const fs = require('fs')
const { menuSections } = require('./menuData');

function generateListMenu() {
  let menuText = "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";
  menuText += "‚ïë ‡º∫ ùïÑùîº‚Ñïùïå ùïÉùïÄùïäùïã ‡ºª\n";
  menuText += "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";
  
  menuSections.forEach((sec, index) => {
    menuText += `‚ïë [${index}] ${sec.title}\n`;
  });
  
  menuText += "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n";
  menuText += "‚ÑπÔ∏è Type '.index [number]' or '.index [section]' to view commands";
  
  return menuText;
}

function findSection(section) {
  if (typeof section === 'number') {
    return menuSections[section];
  }
  
  const searchTerm = section.toLowerCase();
  return menuSections.find(sec => 
    sec.tags.toLowerCase() === searchTerm
  );
}

function formatSection(section) {
  let text = `‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n`;
  text += `‚îÉ  ‡º∫ ${section.title} ‡ºª\n`;
  text += `‚î£‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î´\n`;
  
  if (section.subheader) {
    text += `‚îÉ ${section.subheader}\n`;
    text += `‚î†‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î®\n`;
  }
  
  section.commands.forEach(cmd => {
    text += `‚îÉ ‚óá ${cmd}\n`;
  });
  
  text += `‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n`;
  return text;
}

/**
 * Generate menu text
 * @param {string|number|null} section - Section index, tags, or null for all
 * @returns {string} Formatted menu text
 */
function generateMenu(section = null) {
  if (section === null) {
    return generateListMenu();
  }
  
  const selectedSection = findSection(section);
  if (!selectedSection) {
    return "‚ùå Menu section not found\n\n" + 
           "Available sections:\n" + 
           menuSections.map((sec, i) => `[${i}] ${sec.tags}`).join("\n");
  }
  
  return formatSection(selectedSection);
}

function generateAllMenu() {
  let totalCommands = 0;
  let menuText = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n‚ïë                       ùêãùê¢ùê¨ùê≠ ùê®ùêü ùêÄùê•ùê• ùêåùêûùêßùêÆ                       ‚ïë\n‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n`;

  menuSections.forEach(section => {
    totalCommands += section.commands.length;
    menuText += `‚îå‚îÄ‚îÄ‚îÄ„Äå ${section.title} „Äç‚îÄ‚îÄ‚îÄ\n`;
    if (section.subheader) menuText += `‚îÇ ${section.subheader}\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n`;
    
    section.commands.forEach(cmd => {
      menuText += `‚îÇ ${cmd}\n`;
    });
    
    menuText += `‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n`;
  });

  // Footer dengan total
  menuText += `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n‚ïë  üìä ${menuSections.length} Sections | ${totalCommands} Commands  ‚ïë\n‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`;
  
  return menuText;
}

function formatSection2(section) {
  let text = `‚îé‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÑ‚îà\n`;
  text += `‚îÉ   ${section.title}\n`;
  if (section.subheader) {
    text += `‚î£‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÖ‚îÄ‚îÑ‚îà\n`;
    text += `‚îÉ  ${section.subheader}\n`;
    text += `‚îÉ \n`;
  } else {
    text += `‚î£‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÖ‚îÄ‚îÑ‚îà\n`;
  }
  section.commands.forEach(cmd => {
  text += `‚ïè ‚Ä¢ ${cmd}\n`;
  });
  text += `‚îÉ \n`;
  text += `‚îñ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÑ‚îà`;
  text += `\n> üìä Total ${section.commands.length} commands\n> ¬©${botname}`;
  
  return text;
}

function generateMenu2(sectionInput) {
  // 1. Handle input kosong/null/undefined
  if (sectionInput === undefined || sectionInput === null) {
    return "‚ö†Ô∏è Input Number or tags you want to search";
  }

  // 2. Konversi ke string untuk pencarian text
  const searchQuery = typeof sectionInput === 'string' 
    ? sectionInput.toLowerCase().trim()
    : String(sectionInput).toLowerCase().trim();

  // 3. Handle input angka
  if (!isNaN(sectionInput)) {
    const index = parseInt(sectionInput);
    
    // Validasi range index
    if (index < 0 || index >= menuSections.length) {
      const availableSections = menuSections.map((sec, idx) => `[${idx}] ${sec.title}`).join('\n');
      return `‚ö†Ô∏è Section #${index} not available.\n\nAvailable Sections:\n${availableSections}`;
    }
    
    return formatSection2(menuSections[index]);
  }

  // 4. Handle pencarian text
  const section = menuSections.find(sec => 
    (sec.tags && sec.tags.toLowerCase().includes(searchQuery)) || 
    sec.title.toLowerCase().includes(searchQuery)
  );

  if (!section) {
    const availableSections = menuSections.map((sec, idx) => `[${idx}] ${sec.title}`).join('\n');
    return `‚ö†Ô∏è Section "${sectionInput}" tidak ditemukan. Pilih salah satu:\n${availableSections}`;
  }

  return formatSection2(section);
}

//=====================================
module.exports = {
  generateMenu,
  generateMenu2, 
  generateAllMenu, 
  generateListMenu
};

let file = require.resolve(__filename)
fs.watchFile(file, () => {
	fs.unwatchFile(file)
	console.log(chalk.redBright(`Update ${__filename}`))
	delete require.cache[file]
	require(file)
})